/**
 * FlexGrid - Version: 0.0.1
 *
 * Simple flexbox based grid system
 *
 * Nick Stahlnecker - stahlneckr@gmail.com
 */

/**
 *
 * Flexgrid Variables
 *
 * flex grid comes with a few default settings
 * width: initial - no max width for the grid
 * gutter: 10px - gutter between columns
 * sm, md, lg, xlg: 480px, 768px, 1024px, 1180px - default breakpoint values
 *
 * To override any of the settings declare the $fg map in your sass file.
 * $fg: (
 *  width: 980px,
 *  gutter: 20px,
 *  sm: 360px
 * );
 *
 **/

$fg: ();
$fg-defaults: (
  width: initial,
  gutter: 10px,
  sm: 480px,
  md: 768px,
  lg: 1024px,
  xlg: 1180px,
) !default;

@function fg-config-get($key) {
  @if (map-has-key($fg, $key)) {
    @return map-get($fg, $key);
  } @else {
    @return map-get($fg-defaults, $key);
  }

}

/**
 *
 * Breakpoints (mobile first)
 * @include breakpoint(sm);
 *
**/

@mixin breakpoint($point) {
  @if $point == sm {
    @media (min-width: fg-config-get(sm)) { @content; }
  }
  @else if $point == md {
    @media (min-width: fg-config-get(md)) { @content; }
  }
  @else if $point == lg {
    @media (min-width: fg-config-get(lg)) { @content; }
  }
  @else if $point == xlg {
    @media (min-width: fg-config-get(xlg)) { @content; }
  }

}

/**
 *
 * Row: $fg-row
 * Options:
 * $horz (start, end, center, between, around) - Positions the columns horizontal
 * $vert (start, end, center, stretch) - Positions the columns vertically
 * $wrap (false, true) - Sets flex-wrap
 * $reverse (false, true) - Sets flex-direction
 *
**/

@mixin fg-row($horz:start, $vert:start, $wrap:false, $reverse:false) {
  max-width: fg-config-get(width);
  margin: 0 auto;
  padding: 5px 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  // flex
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;

  // justify-content
  @if $horz == end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    box-pack: end;
    -webkit-justify-content: flex-end;
    -moz-justify-content: flex-end;
    -ms-justify-content: flex-end;
    -o-justify-content: flex-end;
    justify-content: flex-end;
    -ms-flex-pack: end;
  } @else if $horz == center {
    -webkit-box-pack: center;
    -moz-box-pack: center;
    box-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    -ms-justify-content: center;
    -o-justify-content: center;
    justify-content: center;
    -ms-flex-pack: center;
  } @else if $horz == between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    box-pack: justify;
    -webkit-justify-content: space-between;
    -moz-justify-content: space-between;
    -ms-justify-content: space-between;
    -o-justify-content: space-between;
    justify-content: space-between;
    -ms-flex-pack: justify;
  } @else if $horz == around {
    -webkit-box-pack: distribute;
    -moz-box-pack: distribute;
    box-pack: distribute;
    -webkit-justify-content: space-around;
    -moz-justify-content: space-around;
    -ms-justify-content: space-around;
    -o-justify-content: space-around;
    justify-content: space-around;
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    box-pack: start;
    -webkit-justify-content: flex-start;
    -moz-justify-content: flex-start;
    -ms-justify-content: flex-start;
    -o-justify-content: flex-start;
    justify-content: flex-start;
    -ms-flex-pack: start;
  }

  // align-items
  // align-content
  @if $vert == end {
    -webkit-box-align: end;
    -moz-box-align: end;
    box-align: end;
    -webkit-align-items: flex-end;
    -moz-align-items: flex-end;
    -ms-align-items: flex-end;
    -o-align-items: flex-end;
    align-items: flex-end;

    -ms-flex-align: end;
    -webkit-align-content: flex-end;
    -moz-align-content: flex-end;
    align-content: flex-end;
    -ms-flex-line-pack: end;
  } @else if $vert == center {
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;

    -ms-flex-align: center;
    -webkit-align-content: center;
    -moz-align-content: center;
    align-content: center;
    -ms-flex-line-pack: center;
  } @else if $vert == stretch {
    -webkit-box-align: stretch;
    -moz-box-align: stretch;
    box-align: stretch;
    -webkit-align-items: stretch;
    -moz-align-items: stretch;
    -ms-align-items: stretch;
    -o-align-items: stretch;
    align-items: stretch;

    -ms-flex-align: stretch;
    -webkit-align-content: stretch;
    -moz-align-content: stretch;
    align-content: stretch;
    -ms-flex-line-pack: stretch;
  } @else {
    -webkit-box-align: start;
    -moz-box-align: start;
    box-align: start;
    -webkit-align-items: flex-start;
    -moz-align-items: flex-start;
    -ms-align-items: flex-start;
    -o-align-items: flex-start;
    align-items: flex-start;

    -ms-flex-align: start;
    -webkit-align-content: flex-start;
    -moz-align-content: flex-start;
    align-content: flex-start;
    -ms-flex-line-pack: start;
  }

  // flex-wrap
  @if $wrap == true {
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    box-lines: multiple;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  } @else {
    -webkit-box-lines: single;
    -moz-box-lines: single;
    box-lines: single;
    -webkit-flex-wrap: nowrap;
    -moz-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
  }

  // flex-direction
  @if $reverse == true {
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    box-direction: reverse;
    -webkit-flex-direction: row-reverse;
    -moz-flex-direction: row-reverse;
    flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
  } @else {
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    box-orient: horizontal;
    -webkit-box-direction: normal;
    -moz-box-direction: normal;
    box-direction: normal;
    -webkit-flex-direction: row;
    -moz-flex-direction: row;
    flex-direction: row;
    -ms-flex-direction: row;
  }

}

/**
 *
 * Column: $fg-col
 * Options:
 * $size (auto, 0 -> 1) - sets the size of the column
 * $align (start, end, center, stretch) - Positions this specific column vertically
 * $offset (0 -> 1) - Sets margin offset
 * $order (#) - Sets order of this specific column
 *
**/

@mixin fg-col($size:null, $align:auto, $offset:0, $order:0) {

  padding-left: fg-config-get(gutter)/2px;
  padding-right: fg-config-get(gutter)/2px;

  @if($offset > 0) {
    margin-left: percentage($offset);
  }

  @if($size != null) {
    @if($size == auto) {
      width: auto;
    } @else {
      width: percentage($size);
      flex-basis: percentage($size);
    }
  } @else {
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    box-flex: 1;
    -webkit-flex: 1;
    -moz-flex: 1;
    -ms-flex: 1;
    flex: 1;
  }
  &:last-child {
    -webkit-box-flex: 1;
    -moz-box-flex: 1;
    box-flex: 1;
    -webkit-flex: 1;
    -moz-flex: 1;
    -ms-flex: 1;
    flex: 1;
  }

  @if $align == start {
    -webkit-align-self: flex-start;
    -moz-align-self: flex-start;
    -ms-flex-item-align: flex-start;
    -ms-flex-align: flex-start;
    align-self: flex-start;
  } @else if $align == end {
    -webkit-align-self: flex-end;
    -moz-align-self: flex-end;
    -ms-flex-item-align: flex-end;
    -ms-flex-align: flex-end;
    align-self: flex-end;
  } @else if $align == center {
    -webkit-align-self: center;
    -moz-align-self: center;
    -ms-flex-item-align: center;
    -ms-flex-align: center;
    align-self: center;
  } @else if $align == stretch {
    -webkit-align-self: stretch;
    -moz-align-self: stretch;
    -ms-flex-item-align: stretch;
    -ms-flex-align: stretch;
    align-self: stretch;
  } @else {
    -webkit-align-self: auto;
    -moz-align-self: auto;
    -ms-flex-item-align: auto;
    -ms-flex-align: auto;
    align-self: auto;
  }

  -webkit-box-ordinal-group: $order;
  -moz-box-ordinal-group: $order;
  box-ordinal-group: $order;
  -webkit-order: $order;
  -moz-order: $order;
  order: $order;
  -ms-flex-order: $order;

}

html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}
